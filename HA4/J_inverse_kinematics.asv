function [theta_d,err_w,err_v,V_ellip] = J_inverse_kinematics(T_sd,theta_0,S,M,e_w,e_v)

% Algorithm:
joint_lims = deg2rad([170 120 170 120 170 120 175]);
idx = 1;
n = length(S(1,:));
theta_i(1,:) = theta_0;

B = adjT(M^-1)*S;

T_sb = FK_space(S,theta_i(idx,:),M);
    
T_Vb = logm(T_sb\T_sd);
Vb = [T_Vb(3,2);T_Vb(1,3);T_Vb(2,1);T_Vb(1,4);T_Vb(2,4);T_Vb(3,4)];

Vs = adjT(T_sb)*Vb;

err_w(idx,1) = norm(Vs(1:3));
err_v(idx,1) = norm(Vs(4:6));

J = J_space(S,theta_i(idx,:));

V_ellip(idx,1) = sqrt(det(J*J'));

while (norm(Vs(1:3)) > e_w || norm(Vs(4:6)) > e_v) && idx < 25
    
    
    theta_i(idx+1,:) = theta_i(idx,:) + transpose(pinv(J)*Vs);

    idx = idx + 1;
    
%   Saturate joint angles with joint limits  
    for kdx=1:n
        if abs(theta_i(idx,kdx)) > joint_lims(kdx)
            theta_i(idx,kdx) = sign(theta_i(idx,kdx))*joint_lims(kdx);
        end
    end

    T_sb = FK_space(S,theta_i(idx,:),M);
   
    T_Vb = logm(T_sb\T_sd);
    Vb = [T_Vb(3,2);T_Vb(1,3);T_Vb(2,1);T_Vb(1,4);T_Vb(2,4);T_Vb(3,4)];
    
    Vs = adjT(T_sb)*Vb;

    err_w(idx,1) = norm(Vs(1:3));
    err_v(idx,1) = norm(Vs(4:6));

    J = J_space(S,theta_i(idx,:));

    V_ellip(idx,1) = sqrt(det(J*J'));

end

theta_d = theta_i;

end
